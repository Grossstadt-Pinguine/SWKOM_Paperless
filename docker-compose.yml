services:

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: paperless_postgres
      POSTGRES_PASSWORD: paperless
      POSTGRES_DB: paperlessdb
      PGUSER: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - "9091:8080"

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    environment:
      RABBITMQ_DEFAULT_USER: paperless_rabbitmq
      RABBITMQ_DEFAULT_PASS: paperless_mq
    ports:
      - "5672:5672"
      - "9093:15672"
    restart: always
    volumes:
      - "rabbitmq-data:/var/lib/rabbitmq"
      - "rabbitmq-log:/var/log/rabbitmq"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 5

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9090:9001"
    volumes:
      - minio_storage:/data
    restart: always
    environment:
      MINIO_ROOT_USER: paperless_minio
      MINIO_ROOT_PASSWORD: paperless
    command: server --console-address ":9001" /data
    healthcheck:
      test: "mc ready local"
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
    container_name: elasticsearch
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    ports:
      - "9200:9200"

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.5.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "9092:5601"
    depends_on:
      - elasticsearch

  paperless-rest:
    container_name: paperless-rest-server
    build:
      context: paperlessREST
      dockerfile: Dockerfile
    image: paperless-rest-server:latest
    ports:
      - 8081:8080
    restart: always
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  web:
    image: nginx
    volumes:
      - "./web-server/nginx.conf:/etc/nginx/nginx.conf"
      - "./web-server/static:/usr/share/nginx/html"
    ports:
      - "80:80"
    depends_on:
      - paperless-rest

  paperless-ocr:
    container_name: paperless-ocr
    build:
      context: paperlessOCR
      dockerfile: Dockerfile
    image: paperless-ocr:latest
    ports:
      - 8082:8080
    restart: always
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  rabbitmq-data: {}
  rabbitmq-log: {}
  minio_storage: {}
  elasticsearch-data: {}
